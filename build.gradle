plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    // id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

// def mod_version = project.mod_version as Object
// version = "${mod_version}+${project.minecraft_version}"
version = project.mod_version
archivesBaseName = project.archives_base_name
group = project.maven_group as Object

configurations {
    includeTransitive {
        transitive = true
    }
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
    maven {
        url = "https://mvnrepository.com/"
    }
    maven {
		name = "JitPack"
		url = "https://jitpack.io"
	}
    maven {
        name = "NucleoidMC"
        url = "https://maven.nucleoid.xyz/"
    }
}

configurations {
    modIncludeImplementation

    include.extendsFrom modIncludeImplementation
    modImplementation.extendsFrom modIncludeImplementation
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modIncludeImplementation(fabricApi.module("fabric-api-base", project.fabric_version))
    modIncludeImplementation(fabricApi.module("fabric-command-api-v1", project.fabric_version))
    modIncludeImplementation(fabricApi.module("fabric-networking-api-v1", project.fabric_version))
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"



    modImplementation "fr.catcore:server-translations-api:${project.server_translations_version}"

    // DataBreaker applies a number of patches to eliminate the loading of data fixers
    // This greatly reduces the amount of time needed to start the game, but is generally unsafe in production
    modRuntimeOnly ("com.github.SuperCoder7979:databreaker:${databreaker_version}") {
        exclude module: "fabric-loader"
    }

    implementation "com.github.ReviversMC:modget-lib:${modget_lib_version}"
    include "com.github.ReviversMC:modget-lib:${modget_lib_version}"

    include "org.apache.commons:commons-text:${project.commons_text_version}"

    compileOnly "com.github.spotbugs:spotbugs:${project.spotbugs_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
}

project.afterEvaluate {
    configurations.includeTransitive.incoming.resolutionResult.allComponents {
        if (it.id instanceof ModuleComponentIdentifier) {
            def that = it
            dependencies {
                include group: that.id.getGroup(), name: that.id.getModule(), version: that.id.getVersion()
            }
        }
    }
}

processResources {
    inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}_${project.minecraft_version}"}
	}
    archivesBaseName = "modget"
}

// if (project.hasProperty('curseforge.api_key')) {
//     curseforge {
//         apiKey = project.getProperty('curseforge.api_key')
//         project {
//             id = project.curseforge_id
//             changelog = 'A changelog can be found at https://gitea.thebrokenrail.com/TheBrokenRail/ModUpdater/src/branch/master/CHANGELOG.md'
//             releaseType = 'release'
//             addGameVersion project.simple_minecraft_version
//             addGameVersion 'Fabric'
//             mainArtifact(remapJar) {
//                 displayName = "ModUpdater v${mod_version} for ${project.minecraft_version}"
//             }
//             afterEvaluate {
//                 uploadTask.dependsOn('remapJar')
//             }
//             relations {
//                 requiredDependency 'fabric-api'
//             }
//         }
//         options {
//             forgeGradleIntegration = false
//         }
//     }
// }

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
        }
    }

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.

        // maven {
        //     url '/data/maven'
        // }
    }
}